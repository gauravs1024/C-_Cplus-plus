Pointer - it is a variable which/that hold the address of another variable. 
          a normal variable hold/store the value, but pointer variable hold/store the 
          address of another variable.

 Q- what is the diff b/w normal variable & pointer variable ?

 in Pointer we have only 2 things -

   * (Asterisk)- value of the variable.
      * (Asterisk) which is used for two things : 
         -> To declare a pointer variable: When a pointer variable is 
            declared in C/C++, there must be a * before its name.
                 like - int *p;  - p is a pointer variable.
          -> To access the value stored in the address we use the unary 
             operator (*) that returns the value of the variable located at 
             the address. This is also called Dereferencing.
   
	& (ampersand) - address of the variable.
         for assign the address of a variable to a pointer variable, we use 
         the unary operator & (ampersand) that returns the address of that 
         variable.  - for example &x gives us address of variable x. 

Types of Pointers in C -

  1. Null Pointer - We can create a null pointer by assigning NULL value during the pointer
                    declaration. This method is useful when you do not have any address
                    assigned to the pointer. A null pointer always contains value 0.
          int *a = NULL.

  2. void Pointer - In C programming, a void pointer is also called as a generic pointer.
                    It does not have any standard data type. A void pointer is created by
               using the keyword void. It can be used to store an address of any variable.
  3. Wild Pointer - Wild pointers are also called uninitialized pointers. Because they 
                    point to some random memory location.

       int *a;
       *a = 1000; - point to some unknown memory location

 
  4. Dangling pointer - A pointer pointing to a memory location that has been deleted
                        (or released) is called dangling pointer. 
        
          int *tmp = (int *)malloc(sizeof(int));
          free(tmp);  - tmp becomes a dangling pointer
 
  5. non Dangling pointer - A pointer pointing to a memory location that has been exist,
                            or pointer var contain a ref. 
        
          int *tmp = (int *)malloc(sizeof(int));
       
 
  6. Near pointer - which has a maximum size of 16 bits only. 
       
  7. Far Pointer - Far pointer is typically considered as a pointer of 32 bits size. 

  8. Huge pointer - Huge pointer has the same size of 32-bit to that of a far pointer.

  9. Complex Pointer.


  Q- how to declare pointer var?
  ans - syn -  
            datatype *varName; - for declare pointer var

    int x = 100; - normal variable 
    int *a; - single pointer, can hold/store the address of a normal variable
    int **b; - double pointer, can hold/store the address of a single pointer variable
    int ***c; - triple pointer, can hold/store the address of a double pointer variable
    int ****d; - tetra pointer, can hold/store the address of a triple pointer variable
    int *****e; - penta Pointer, can hold the address of tetra pointer

Pointer - it is a variable which / that hold the address of another
           variable.

  
    a normal variable can store value but pointer variable hold the
       address of a variable.

     mean pointer variable ka jo value hoga wo address of another variable hoga. 
 
   in Pointer we have only 2 things. 

     * - value of the variable
     & - address of the variable.  - use for address of the variable

  Q- * kab kab use karte hai?

    1. for declare pointer type variable 
    2. for display value of the variable. 

  int x = 100; - normal variable 
  int *a;
  int **b;
  int ***c;
  int ****d;
  int *****e; 

    a = &x; - a hold the hold address of x var
    b = &a; - b hold the hold address of a var
    c = &b; - c hold the hold address of b var
    d = &c; - d hold the hold address of c var
    e = &d; - e hold the hold address of d var

    print a;   - address of x
    print b;   - address of a
    print c;   - address of b
    print d;   - address of c
    print e;   - address of d

    print *a;  - value of x - 100
    print *b   - address of x  
    print *c   - address of a
    print *d   - address of b
    print *e;  - address of c



   print x;  - 100
   print *a;  - 100 
   print **b; - 100
   print ***c; - 100
   print ****d;  - 100
   print *****e;  - 100 
 
Point about using Pointer - 
 ->  Jitne * ke saath aapne pointer var declare kiya hai agar utne ke saath hi aap print
     kar doge to value display karega. agar pointer variable ko print karenge to wo 
     address display karega jo wo hold kar raha hoga.
 ->  jitne * ke saath aapne pointer var declare kiya hai agar usse ek kam * ke saath aap 
     print karoge to wo address display karega jo wo hold kar raha hoga

_________________________________________________________________________________


//pointer example 
void main()
 {
    int x = 100; // - normal variable
    int *a; //  single pointer, can hold/store the address of a normal variable
    int **b; // double pointer, can hold/store the address of a single pointer variable
    int ***c; // triple pointer, can hold/store the address of a double pointer variable
    int ****d; // tetra pointer, can hold/store the address of a triple pointer variable
    int *****e; // penta Pointer, can hold the address of tetra pointer

    a = &x; // - a hold the hold address of x var
    b = &a; // - b hold the hold address of a var
    c = &b; // - c hold the hold address of b var
    d = &c; // - d hold the hold address of c var
    e = &d; // - e hold the hold address of d var
    clrscr();
    printf("\naddress of x with &x - %u",&x);
    printf("\naddress of x with a - %u",a);
    printf("\naddress of x with b - %u",*b);
    printf("\naddress of x with c - %u",**c);
    printf("\naddress of x with d - %u",***d);
    printf("\naddress of x with e - %u",****e);
    printf("\n value of x with x = %d",x);
    printf("\n value of x with a = %d",*a);
    printf("\n value of x with b = %d",**b);
    printf("\n value of x with c = %d",***c);
    printf("\n value of x with d = %d",****d);
    printf("\n value of x with e = %d",*****e);
    printf("\n display address b with b - %u",&b);
    printf("\n display address b with c - %u",c);
    printf("\n display address b with d - %u",*d);
    printf("\n display address b with e - %u",**e);
    getch();
}
_________________________________________________________________________________
// pointer with array
void main()
{
   int i,ar[] = {10,20,30,40,50};
   int *p;
   p = ar;   // p hold the base address of ar
   p = &ar;  // p hold the address of ar[0]
   p = &ar[0]; // p hold the address of ar[0]  - 2nd & 3rd statements r same
   // in all 3 statements which one is the best statement. - 1st statement
   // is the best bcos p hold the base address of ar array
   clrscr();
   printf("\nAddress of ar[0] with ar - %u",ar);
   printf("\nAddress of ar[0] with &ar - %u",&ar);
   printf("\nAddress of ar[0] with &ar[0] - %u",&ar[0]);
   printf("\nvalue of ar[0] with *p - %d",*p);
   printf("\nvalue of ar[1] with *(p+1) - %d",*(p+1));
   printf("\nvalue of ar[2] with *(p+2) - %d",*(p+2));
   printf("\nvalue of ar[3] with *(p+3) - %d",*(p+3));
   printf("\nvalue of ar[4] with *(p+4) - %d",*(p+4));
   printf("\nDisplay value with p[i] - ");
   for(i=0;i<5;i++)
     printf("%d, ",p[i]);
   printf("\nDisplay value with i[p] - ");
   for(i=0;i<5;i++)
     printf("%d, ",i[p]);
   getch();
}
_________________________________________________________________________________

// pointer function / function pointer - can hold the address/ref of a function
void wel();
void sum(int,int);
void area(int,int,int);
//void* me();   // void *me();  // me ek function hai jo void type ka pointer return karega\
void (*me)() ; // pointer function / function pointer - can hold the address of any function
void main()
{
   clrscr();
   me = wel; // me hold the address of wel
   me(); // indirectly wel calling.
   me = sum; // me hold the address of sum
   me(10,5); // indirectly sum calling.
   me = area; // me hold the address of area
   me(10,5,2); // indirectly area calling.
   getch();
}
void wel() { printf("\n\n Welcome to HIET College"); }
void sum(int a,int b) { int c = a + b; printf("\n\n Sum is = %d",c); }
void area(int w,int h,int r) { int c = w * h * r; printf("\n\n Area is = %d",c); }



 for dynamic/runtime memory allocation in C we have 4 functions -
      malloc() + calloc() + realloc() + free();

    -> malloc() + calloc() - both functions r for memory allocation.
    -> realloc() method for memory reallocation.
    -> free() - for memory deallocation.

    ** malloc() + realloc() both r with 1 argumet - size of memory, means
       use for single dim memory alloocation
    ** calloc()  - with 2 argument - no of elements + size of each element
       use for double dim memory allocation.
    ** malloc() + calloc() + realloc() functions return type - void pointer,
       that's why we need to cast that - void pointer means that can store
       any type of value & we can cast into any type.

	       malloc() 			calloc()
  * with one argument.          * with 2 argumets
     malloc(sizeof memoty)        calloc(no of elements,size of each element)
  * use for single dim memory    * use for double dim memory allocation
    allocation
  * initialize with garbage      * initialize with 0
  * Major use - whole DS depends * Minor use - means - no use -
    on malloc() function.
