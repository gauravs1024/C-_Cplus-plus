/*
   steps for implement linked List -

    1st - design the struct with node name, that contain 2 attributes
	   1. data - that can be primitive & non primitive type
	   2. node type pointer var with next name

   C & C++ -                             Java
					 class LinkedList
struct node                              {
{                                            class Node
   int data;                                 {
   struct node *next;                            int data;
};                                               Node next;
					     }

	 struct in C                      struct in C++
    * need to typedef                        * no need of typedef

    struct node *fst,*curr,*tmp;                node *fst,*curr,*tmp;
   * in C struct we can't design functions   * we can design function in C++
						function.
   * NOT sapport access modifiers            * support the access modifiers.

	  struct 				class
   * not support the OOPs concepts           * support the OOPs concept.
   * default access modifier in C++ struct  * default access modifier in C++
     is - public                              class - private.


 2nd
 - now design the struct type pointer variables for manage the list

  in C & C++ -

   struct node *fst = NULL, *curr,*tmp,*prev,*last;

  in java - Node fst=null,last,prev,tmp,curr;


     fst - for hold the ref of 1st node - it can be - fst / head / start / first / top / root
     tmp - for tmp node - add new node
     curr - for hold the ref of current node
     prev - for hold the address of prev node - for add new name before the
	    particular.
     last - for hold the ref of last node.

 in C & C++

 3rd - now define / design function prototype for manage the list/

 int isempty();
 void addfirst();
 void addlast();
 void addmid();
 void disp();
 void del();  // delfirst() / delLast() / delMid();
 void sort();


  4th - now design main function & design menu for manage the list
*/

#include<stdio.h>
struct node
{
   int data;
   struct node *next;
};

 struct node *fst = NULL, *curr,*tmp,*prev,*last;
 int isempty();
 void addfirst();
 void addlast();
 void addmid();
 void disp();
 void del();  // delfirst() / delLast() / delMid();
 void sort();

void main()
{
    char c;
    while(1)
    {
       clrscr();
       printf("\n\t\t1. Add new Node in begining.");
       printf("\n\t\t2. Add new Node in last. ");
       printf("\n\t\t3. Add new Node in Mid");
       printf("\n\t\t4. List of all existing Node.");
       printf("\n\t\t5. Delete for existing Node.");
       printf("\n\t\t6. Sort List elements in Ascending order");
       printf("\n\t\t0. for exit");
       printf("\n\t Plz Enter ur Choice : ");
       c = getche();
       if(c=='1')
	  addfirst();
       else if(c=='4')
	  disp();
       else if(c=='2')
	  addlast();
       else if(c=='3')
	  addmid();
       else if(c=='5')
	  del();
       else if(c=='6')
	 sort();
       else if(c=='0')
	 break;
       else
	 printf("\n\n\t\t Sorry this is invalid Choic.");
       getch();
    }
}

int isempty()            // boolean isempty() {  return fst==null;  }
{
   return fst==NULL; //
}

void addfirst()
{
    // allocate memory for node
    tmp = (struct node*) malloc(sizeof(struct node));  // C++ & Java - tmp = new Node();
    printf("\n\n\tPlz Enter value for Node : ");
    scanf("%d",&tmp->data);
    tmp->next = fst;
    if(isempty())
      last = tmp;
    fst = tmp;
    printf("\n\n Node Successfully Inserted..");
}

void addlast()
{
    // allocate memory for node
    tmp = (struct node*) malloc(sizeof(struct node));  // C++ & Java - tmp = new Node();
    printf("\n\n\tPlz Enter value for Node : ");
    scanf("%d",&tmp->data);
    tmp->next = NULL;
    if(isempty())
      fst = last = tmp;
    else
    {
	last->next = tmp;
	last = tmp;
    }
    printf("\n\n Node Successfully Inserted..");
}

void addmid()
{
    char ch;
    int n;
    disp();
    printf("\n Plz Enter node value where U want to add : ");
    scanf("%d",&n);
    curr = prev = fst;
    while(curr != NULL)
    {
       if(curr->data == n) // node exist hai
       {
	   // allocate memory for node
	   tmp = (struct node*) malloc(sizeof(struct node));  // C++ & Java - tmp = new Node();
	   printf("\n\n\tPlz Enter value for Node : ");
	   scanf("%d",&tmp->data);
	   printf("\n\t\t where U want to add (1 - BEFORE / 2 - AFTER ) : ");
	   ch = getche();
	   if(ch=='1') // before
	   {
	      tmp->next = curr;
	      prev->next = tmp;
	   }
	   if(ch=='2') // after
	   {
	      tmp->next = curr->next;
	      curr->next = tmp;
	   }
	   printf("\n\n Node Successfully Inserted..");
	   break;
       }
       prev = curr;
       curr = curr->next;
   }
}

void del()
{
    int n;
    disp();
    if(!isempty())
    {
       printf("\n\n\tPlz Enter Node value for delete : ");
       scanf("%d",&n);
       curr = prev = fst;
       while(curr!=NULL)
       {
	  if(curr->data == n)
	  {
	     if(curr == fst) // if selected node is the 1st node
		fst = curr->next;
	     else
	       prev->next = curr->next;
	     if(curr->next == NULL) // if selected node is the last node
		 last = prev;
	      free(curr);
	   }
	   prev = curr;
	   curr = curr->next;
	 }
       }
       printf("\n\n Node Successfully Deleted..");
}
void sort()
{   // int n;
    if(isempty())
	printf("\n\n Sorry ur List is empty");
    else
    {
      for(prev = fst;prev->next!=NULL;prev = prev->next)
      {
	 for(curr = prev->next;curr!=NULL; curr=curr->next)
	 {        50          10
	   if(prev->data > curr->data)
	   {      //            50 + 10;    prev->data = 60
	      prev->data = prev->data + curr->data; // n = prev->data;
		  //	     60      -    10   , curr->data = 50;
	      curr->data = prev->data - curr->data; // prev->data = curr->data;
		  //	     60        -  50    = 10;  prev->data = 10;
	      prev->data = prev->data - curr->data; // curr->data = n;
	   }
	 }
      }
      printf("\n\nItems Successfully Sort.............");
    }
}

void disp()
{
    if(isempty())
       printf("\n\n\t Sorry ur List is empty.");
    else
    {
       curr = fst;
       printf("\n\n\tElements in List : ");
       while(curr!=NULL)
       {
	   printf("%d, ",curr->data);
	   curr = curr->next;
       }
    }
}























